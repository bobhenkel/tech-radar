name,ring,quadrant,isNew,description
direnv,adopt,tools,TRUE,"<p>direnv is an extension for your shell. It augments existing shells with a new feature that can load and unload environment variables depending on the current directory. <strong><a href=""https://direnv.net//"">direnv</a></strong></p>"
Helm,adopt,tools,TRUE,"<p>Package manager for Kubernetes. <strong><a href=""https://helm.sh//"">Helm</a></strong> Helm is one tool that has become an unoffical standard.</p>"
WTF,adopt,tools,TRUE,"<p>Despite the name a handy terminal dashboard.<strong><a href=""https://wtfutil.com//"">Dapr</a></strong>, is rapidly becoming a de facto choice for creating and managing cloud infrastructures by writing declarative definitions. The configuration of the servers instantiated by Terraform is usually left to Puppet, Chef or Ansible. We like Terraform because the syntax of its files is quite readable and because it supports a number of cloud providers while making no attempt to provide an artificial abstraction across those providers. The active community will add support for the latest features from most cloud providers. Following our first, more cautious, mention of Terraform almost two years ago, it has seen continued development and has evolved into a stable product with a good ecosystem that has proven its value in our projects. The issue with state file management can now be sidestepped by using what Terraform calls a ""remote state backend."" We've successfully used <a href=""https://aws.amazon.com/s3/"">AWS S3</a> for that purpose.</p>"
Magefile,adopt,tools,TRUE,"<p><strong><a href=""https://github.com/magefile/mage""> Mage file</a></strong> a Make/rake-like build tool using Go</p>"
Goss,adopt,tools,TRUE,"<p><ahref=""https://github.com/aelsabbahy/goss"">Goss</a></strong> Quick and Easy server/infra testing/validation. Where inspec is rich, complex and deep goss is much simpler just a single go binary and a yaml file with your tests.</p>"
Helm,trial,tools,TRUE,"<p><a href=""http://helm.sh""><strong>Helm</strong></a> is a package manager for <a href=""/radar/platforms/kubernetes"">Kubernetes</a>. It comes with a repository of curated Kubernetes applications that are maintained in the official <a href=""https://github.com/helm/charts"">Charts repository</a>. Helm has two components: a command line utility called Helm and a cluster component called Tiller. Securing a Kubernetes cluster is a wide and nuanced topic, but we highly recommend setting up Tiller in a role-based access control (RBAC) environment. We've used Helm in a number of client projects and its dependency management, templating and hook mechanism has greatly simplified the application lifecycle management in Kubernetes. However, we recommend proceeding with caution — Helm's <a href=""/radar/techniques/templating-in-yaml"">YAML templating</a> can be difficult to understand, and Tiller still has some rough edges. Helm 3 is expected to address these issues.</p>"
InSpec,adopt,tools,TRUE,"<p> How does an organization give autonomy to delivery teams while still making sure their deployed solutions are safe and compliant? How do you ensure that servers, once deployed, maintain a consistent configuration without drift? <strong><a href=""https://www.chef.io/inspec/"">InSpec</a></strong> is positioned as a solution for continuous compliance and security, but you can also use it for general infrastructure testing. InSpec allows the creation of declarative infrastructure tests, which can then be continuously run against provisioned environments including production. Our teams particularly praise its extensible design with resources and matchers for multiple platforms. We recommend trialling InSpec as a solution to the problem of assuring compliance and security.</p>"
Terratest,assess,tools,TRUE,"<p>We widely use <a href=""/radar/tools/terraform"">Terraform</a> as code to configure a cloud infrastructure. <strong><a href=""https://github.com/gruntwork-io/terratest"">Terratest</a></strong> is a Golang library that makes it easier to write automated tests for infrastructure code. A test run creates real infrastructure components (such as servers, firewalls or load balancers), deploys applications on them and validates the expected behavior using Terratest. At the end of the test, Terratest can undeploy the apps and clean up resources. This makes it largely useful for end-to-end tests of your infrastructure in a real environment.</p>"
Release train,hold,techniques,TRUE,"<p>We've seen organizations successfully move from very infrequent releases to a higher cadence by using the <strong>release train</strong> concept. The release train is a technique for coordinating releases across multiple teams or components that have runtime dependencies. All releases happen on a fixed and reliable schedule regardless of whether all expected features are ready (the train doesn't wait for you — if you miss it you wait for the next one). Although we wholeheartedly endorse discipline around regularly releasing and demoing working software, we've experienced serious drawbacks with the approach over the medium to long term as it reinforces temporal coupling around sequencing of changes and can degrade quality as teams rush to complete features. We prefer to focus on the architectural and organizational approaches necessary to support independent releases. Although the train can be a useful forcing function for speeding up slower teams, we've also seen it as imposing an upper limit on how quickly faster-moving teams can move. We believe that it is a technique that should be approached with a good degree of caution, if at all.</p>"
AKS,adopt,k8s-distributions,TRUE,"<p><a href=""TODO"">AKS</a> Microsoft Azure K8s distro managed service.</strong> </p>"
EKS,adopt,k8s-distributions,TRUE,"<p><a href=""TODO"">EKS</a> Amazon AWS K8s distro managed service.</strong> </p>"
GKE,adopt,k8s-distributions,TRUE,"<p><a href=""TODO"">GKE</a> Google Cloud K8s distro managed service.  As far as K8s managed services this is the Tesla of the big 3.</strong> </p>"
K3s,trial,k8s-distributions,TRUE,"<p><a href=""https://k3s.io/"">K3s</a> A lightweight Kubernetes that can be ran on resource constrained devices. Might be a nice distro to build fleets of small k8s clusters that act as one big swarm to protect against single point of failure.</strong> </p>"
Pharmer,assess,k8s-distributions,TRUE,"<p>Kubernetes Cluster Manager using Kubeadm & Cluster API <strong><a href=""https://github.com/pharmer/pharmer"">Pharmer</a> It can spin up AKS, EKS, GKE, as well as a kubeadm based cluster on said clouds if you want to manage a control plain.  They say it's ""Kubernetes Cluster Manager for Kubeadm. Think kops using kubeadm!""</strong></p>"
Lokomotive,assess,k8s-distributions,TRUE,"<p><a href=""https://github.com/kinvolk/lokomotive-kubernetes"">A fork of Typhoon that leverages Flatcar Linux. It supports AWS, Azure, Bare Metal, and Packet.</strong> </p>"
Typhoon,assess,k8s-distributions,TRUE,"<p><a href=""https://typhoon.psdn.io/"">Typhoon</a> An opionated and lean k8s distro that uses upstream Kubernetes. Worthy of consideration if you want to run your own k8s cluster(master and workers) on multiple clouds with consistency. It supports AWS, Azure, Bare Metal, Digital Ocean, and Google.</strong> </p>"
Go,adopt,languages,TRUE,"<p><a href=""https://golang.org/"">Go</a> Strongly typed and statically typed language. Sits between languages like Python and Rust on ease of use and performance.  This is now my go to language overall. Huge community and a lot libraries to use, alot the the Python eco system.</strong> </p>"
Python,adopt,languages,TRUE,"<p><a href=""https://www.python.org/"">Python</a> Loosley typed interpreted scripting language.  If your doing prototypes, want to through together a quick piece of code and move on you can't do much better than Python. Has a very rich eco system with a library/pip that can enable you to quickly get something working at the expense of being interpreted and requiring Python be installed where you want to run your scripts. </strong></p>"
Rust,adopt,languages,TRUE,"<p><a href=""https://www.rust-lang.org/"">Rust</a> Strongly typed and statically typed language. Worth checking out if your making a new cli, micro service, or an OS. Not as simple of a language as Go.</strong></p>"
